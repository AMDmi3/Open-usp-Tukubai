#!/usr/bin/env python
#coding: utf-8
#
# haba : 表示幅をだす（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import sys
import unicodedata

_usage = "haba [-vf] <file1> <file2>..."
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"

wide_class = ["W","F","A"]	# 全角文字クラス

def error(msg, *arg):
	print('Error[haba] :', msg % arg, file=sys.stderr)
	sys.exit(1)

def usage():
	print("Usage   :", _usage, file=sys.stderr)
	print("Version :", _version, file=sys.stderr)
	print("         ", _code, file=sys.stderr)
	sys.exit(1)

#
# 入力ファイルオープン
def open_file(filename, mode = 'r'):

	if filename=='-' or filename == None: # ファイル名が'-'または省略なら標準入力とする
		file = sys.stdin
	else:
		try:
			file = open(filename, mode)
		except:
			error("ファイル '%s' をオープンできません。", filename)
	return file

#
# 改行符号（\r\n）の削除関数
def rm_eol(line):
	return line.rstrip('\n').rstrip('\r')

#
# unicode 変換
#
def to_unicode(s):
	if sys.version_info >= (3, 0): return s
	else:
		try:
			return unicode(s, 'utf_8')
		except:
			error("不当なマルチバイト文字が含まれています。")

#
# 代用対前半部の判定
#
def isHighSurrogate(cp):
	if 0xd800 <= cp and cp <= 0xdbff: return True
	return False

#
# 代用対後半部の判定
#
def isLowSurrogate(cp):
	if 0xdc00 <= cp and cp <= 0xdfff: return True
	return False

#
# UCS2の判定
#
def isUCS2():
	if sys.maxunicode==0xFFFF: return True
	else:                      return False

#
# unicodedata.east_asian_width()「東アジアの文字幅」の修正版
#
def east_asian_width(c):
	cp=ord(c)
	# unicodedata.east_asian_width()は代用対（[D800～DBFF]+[DC00～DFFF]のペア）の前後半部に対して
	# N（Neutral; 中立）を返すので
	# W（Wide; 広）と修正する
	if isUCS2() and (isHighSurrogate(cp) or isLowSurrogate(cp)): return 'W'
	# unicodedata.east_asian_width()は半角オーバ－ライン「‾」（U+203e）に対して
	# A（Ambiguous; 曖昧=ギリシャ文字/ロシア文字と同様に全角扱いされる）を返すので
	# Na（Narrow; 狭=半角英数記号）に準ずるものと修正する
	elif cp==0x203e: return 'Na'
	else:            return unicodedata.east_asian_width(c)

#
# 半角判定
#
def isHalfWidth(c):
	# 文字のEast_Asian_Width特性検査でFまたはWまたはAならば
	# F/W/A = Wide（全角英数記号） Full（漢字 ひらがな 全角カタカナ） Ambiguous（ロシア文字 ギリシャ文字）
	if east_asian_width(c) in wide_class: return False	# 全角
	else:                                 return True	# それ以外は半角

#
# 文字列の表示幅
#
def strwidth(s):
	wid = 0
	if isUCS2():
		surrogate_pair=False	# UCS2では代用対（surrogate pair）がありうる
		for c in to_unicode(s):
			cp=ord(c)	# code point
			# 代用対（[D800～DBFF]+[DC00～DFFF]のペア）の存在を考慮する
			if not surrogate_pair:
				if isHighSurrogate(cp):	# 代用対の前半2バイト
					surrogate_pair=True	# suurogate pair starts
				else:	# 代用対でなければ半角判定をする
					if isLowSurrogate(cp):	# 代用対の後半2バイトが単独で現れた
						error("代用対の構成が無効です。")
					if isHalfWidth(c):	wid += 1
					elif cp!=0x3099 and cp!=0x309a:	wid+=2	# 合成用濁点/合成用半濁点はcountしない
			else:
				if isLowSurrogate(cp):	# 代用対の後半2バイト
					surrogate_pair=False	# suurogate pair ends
					wid+=2
				else:
					error("代用対の構成が無効です。")
	else:	# UCS4
		for c in to_unicode(s):
			cp=ord(c)	# code point
			if isHalfWidth(c):	wid+=1
			elif cp!=0x3099 and cp!=0x309a:	wid+=2	# 合成用濁点/合成用半濁点はcountしない
	return wid

#
# main

if __name__ == '__main__':

	# コマンドの説明表示
	if len(sys.argv) <= 1 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	# パラメータ解析
	f, v, wide_class = False, False, ["W","F","A"] # default値
	filenames=[]
	while len(sys.argv) > 1:
		if sys.argv[1].startswith("-") and len(sys.argv[1])>1: # オプション
			if not sys.argv[1][1:] in ["f","v","fv","vf"]: # 許される値か
				error("オプションの値(%s)が不正です",sys.argv[1])
			if "f" in sys.argv[1][1:]: f=True
			if "v" in sys.argv[1][1:]: v=True
		else:
			filenames.append(sys.argv[1]) # fileパラメ－タへ追加
		del(sys.argv[1]) # popup

	# パラメータ検査
	if len(filenames)==0:
		error("入力ファイルの指定がありません")

	# 指定のファイル名に対して
	for filename in filenames:
		# ファイルを開く
		file=open_file(filename)
		if filename=="-": filename="STDIN" # 標準入力（"-"）に対してはfilenameを"STDIN"に変更
		prev_haba_string=-1
		linecount=0
		# ファイルを読む
		for line in file:
			linecount+=1
			line=rm_eol(line)
			# 表示幅の計算
			haba_string=strwidth(line)	# 全角を2、半角を1としたときの行の表示幅
			if f: outputline=filename+" " # -f指定のときファイル名を出力
			else: outputline=""
			if v:
				if haba_string==prev_haba_string: continue # -v指定で表示幅に変化がなければskip
				outputline+=str(linecount)+" " # 変化のあった行数を出力
			prev_haba_string=haba_string
			outputline+=str(haba_string)
			# 表示幅を出力
			print(outputline)
		# ファイルを閉じる
		file.close()

	# 終了
	sys.exit(0)
